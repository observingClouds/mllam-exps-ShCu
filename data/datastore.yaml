schema_version: v0.5.0
dataset_version: v0.1.0

output:
  variables:
    static: [grid_index, static_feature]
    state: [time, grid_index, state_feature]
    forcing: [time, grid_index, forcing_feature]
  coord_ranges:
    time:
      start: 2020-01-11T22:20
      end: 2020-01-11T22:30  #2020-02-19T10:00
      step: PT10M
  chunking:
    time: 1
  splitting:
    dim: time
    splits:
      train:
        start: 2020-01-11T22:20
        end: 2020-01-11T22:30  #2020-02-19T10:00
        compute_statistics:
          ops: [mean, std, diff_mean, diff_std]
          dims: [grid_index, time]
      val:
        start: 2020-01-11T22:20
        end: 2020-01-11T22:30
      test:
        start: 2020-01-11T22:20
        end: 2020-01-11T22:30

inputs:
  
  icon_merged:
    path: test.zarr
    dims: [time, cell]
    variables:
      - t_2m
      - u_10m
      - v_10m
      - clct
      - lhfl_s
      - pres_sfc
      - qv_2m
      - rain_gsp_rate
      - shfl_s 
      - t_seasfc
      # - tot_prec  # accumulated precipitation
      - tqc_dia
      - tqi_dia
      - tqv_dia
      - sob_t
      - sod_t
      - sou_t
      - thb_t
      # - synsat_rttov_forward_model_2__abi_ir__goes_16__channel_7  # regridded satellite data, need original along cell dim
    dim_mapping:
      time:
        method: rename
        dim: time
      state_feature:
        method: stack_variables_by_var_name
        name_format: "{var_name}"
      grid_index:
        method: stack
        dims: [cell]
    target_output_variable: state
  
  danra_surface_forcing:
    path: test.zarr
    dims: [time, cell]
    derived_variables:
      # derive variables to be used as forcings
      # toa_radiation:
      #   kwargs:
      #     time: ds_input.time
      #     lat: ds_input.lat
      #     lon: ds_input.lon
      #   function: mllam_data_prep.ops.derive_variable.physical_field.calculate_toa_radiation
      hour_of_day_sin:
        kwargs:
          time: ds_input.time
          component: sin
        function: mllam_data_prep.ops.derive_variable.time_components.calculate_hour_of_day
      hour_of_day_cos:
        kwargs:
          time: ds_input.time
          component: cos
        function: mllam_data_prep.ops.derive_variable.time_components.calculate_hour_of_day
    dim_mapping:
      time:
        method: rename
        dim: time
      grid_index:
        method: stack
        dims: [cell]
      forcing_feature:
        method: stack_variables_by_var_name
        name_format: "{var_name}"
    target_output_variable: forcing
